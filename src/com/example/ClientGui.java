package com.example;

import javax.swing.*;
import java.awt.*;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.net.InetAddress;
import java.net.Socket;

public class ClientGui {
    private JLabel uid;
    private JTextField textField1;
    private JTextField textField2;
    private JLabel messageHistory;
    private JPanel panel1;
    private JButton sendButton;

    private static class MessageWaiter extends Thread {
        DataInputStream dis;
        private JLabel messageHistory;
        private boolean isRunning = true;

        MessageWaiter(DataInputStream dis, JLabel label) {
            this.dis = dis;
            messageHistory = label;
        }

        @Override
        public void run() {
            super.run();

            while (isRunning) {
                try {
//                    String from = dis.readUTF();
                    String msg = dis.readUTF();
                    String old = messageHistory.getText();
                    old +=  msg + "\n";
                    messageHistory.setText(old);
                } catch (IOException e) {
                    e.printStackTrace();
                }

            }
        }
    }

    private static class ClientThread extends Thread {
        ClientGui gui;
        private String s;
        private String r;

        ClientThread(ClientGui g) {
            gui = g;
        }

        private final Object waitMsg = new Object();

        @Override
        public void run() {
            super.run();
            Socket socket = null;
            try {
                socket = new Socket(InetAddress.getLocalHost(), 4004);
            } catch (IOException e) {
                e.printStackTrace();
            }

            DataInputStream dis = null;
            try {
                assert socket != null;
                dis = new DataInputStream(socket.getInputStream());
            } catch (IOException e) {
                e.printStackTrace();
            }
            DataOutputStream dos = null;
            try {
                dos = new DataOutputStream(socket.getOutputStream());
            } catch (IOException e) {
                e.printStackTrace();
            }

            try {
                String myId = dis.readUTF();
                gui.uid.setText(myId);
            } catch (IOException e) {
                e.printStackTrace();
            }

            MessageWaiter t = new MessageWaiter(dis, gui.messageHistory);
            t.start();

            while (true) {
                synchronized (waitMsg) {
                    try {
                        waitMsg.wait();

                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                }
                try {
                    assert dos != null;
                    dos.writeUTF(r);
                    dos.writeUTF(s);
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }

        }

        public void sendMsg(String r, String msg) {
            synchronized (waitMsg) {
                s = msg;
                this.r = r;
                waitMsg.notifyAll();

            }
        }
    }

    public static void main(String[] args) throws InterruptedException {
        JFrame frame1 = new JFrame("Messenger");
        ClientGui frame = new ClientGui();
        frame1.setContentPane(frame.panel1);
        frame1.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame1.pack();
        frame1.setVisible(true);

        ClientThread t = new ClientThread(frame);

        t.start();
        frame.sendButton.addActionListener(e -> {
            t.sendMsg(frame.textField1.getText(), frame.textField2.getText());
//            synchronized (sync) {
//                sync.notifyAll();
//            }
        });

//        frame.paper.addActionListener(e -> t.sendMsg("paper"));
//        frame.scissors.addActionListener(e -> t.sendMsg("scissors"));
//        frame.stone.addActionListener(e -> t.sendMsg("stone"));
//
        t.join();

    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        panel1 = new JPanel();
        panel1.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(7, 1, new Insets(0, 0, 0, 0), -1, -1));
        uid = new JLabel();
        uid.setText("Label");
        panel1.add(uid, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label1 = new JLabel();
        label1.setText("Recepient ID");
        panel1.add(label1, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        textField1 = new JTextField();
        panel1.add(textField1, new com.intellij.uiDesigner.core.GridConstraints(2, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        final JLabel label2 = new JLabel();
        label2.setText("Message");
        panel1.add(label2, new com.intellij.uiDesigner.core.GridConstraints(3, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        textField2 = new JTextField();
        panel1.add(textField2, new com.intellij.uiDesigner.core.GridConstraints(4, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        panel1.add(panel2, new com.intellij.uiDesigner.core.GridConstraints(6, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        messageHistory = new JLabel();
        messageHistory.setText("");
        panel2.add(messageHistory, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        sendButton = new JButton();
        sendButton.setText("Send");
        panel1.add(sendButton, new com.intellij.uiDesigner.core.GridConstraints(5, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panel1;
    }
}
